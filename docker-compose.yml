services:
  api:
    image: ghcr.io/saleor/saleor:latest
    ports:
      - 8000:8000
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    stdin_open: true
    tty: true
    depends_on:
      redis:
        condition: service_started
      jaeger:
        condition: service_started
      db:
        condition: service_healthy 
    volumes:
      # shared volume between worker and api for media
      - saleor-media:/app/media
    env_file:
      - common.env
      - backend.env
    environment:
      - DASHBOARD_URL=http://localhost:9000/
      - ALLOWED_HOSTS=localhost,api
    healthcheck:
      test: 
        - "CMD-SHELL"
        - "-c"
        - "import http.client; conn = http.client.HTTPConnection('localhost', 8000); try: conn.request('GET', '/graphql/'); res = conn.getresponse(); exit(0) if res.status == 200 else exit(1); except: exit(1)"
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Give the service some time to start up before checking


  frontend:
    build:
      context: ./Storefront
      dockerfile: Dockerfile
    volumes:
      # 1. Bind mount your application code
      # This keeps your code in sync with your host for development
      - ./Storefront:/app
      # 2. Named volume for node_modules
      - node_modules_store:/app/node_modules  
      - /app/.next
    image: storefront_img
    container_name: storefront
    ports: 
      - "3000:3000"
    depends_on:
      api: 
        condition: service_healthy 
    environment:
      - NEXT_PUBLIC_SALEOR_API_URL=http://api:8000/graphql/
      - SALEOR_API_INTERNAL_URL=http://api:8000/graphql/
      - NEXT_PUBLIC_STOREFRONT_URL=http://localhost:3000
      - SALEOR_APP_TOKEN=

  dashboard:
    image: ghcr.io/saleor/saleor-dashboard:latest
    ports:
      - 9000:80
    restart: unless-stopped
 
  db:
    image: library/postgres:alpine
    ports:
      - 5432:5432
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    volumes:
      - saleor-db:/var/lib/postgresql/data
      - ./replica_user.sql:/docker-entrypoint-initdb.d/replica_user.sql:ro,z
    environment:
      - POSTGRES_USER=saleor
      - POSTGRES_PASSWORD=saleor
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      test: ["CMD-SHELL", "pg_isready -U saleor -d saleor"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: library/redis:alpine
    ports:
      - 6379:6379
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    volumes:
      - saleor-redis:/data


#Scheduler:  https://docs.saleor.io/developer/running-saleor/task-queue
  worker:
    image: ghcr.io/saleor/saleor:latest
    command: celery -A saleor --app=saleor.celeryconf:app worker --loglevel=info -B
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    env_file:
      - common.env
      - backend.env
    depends_on:
      - redis
      - mailpit
    volumes:
      # shared volume between worker and api for media
      - saleor-media:/app/media


#Tracer 
  jaeger:
    image: jaegertracing/jaeger
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    volumes:
      - type: tmpfs
        target: /tmp

#Mail config
  mailpit:
    image: axllent/mailpit
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui. Visit http://localhost:8025/ to check emails
    restart: unless-stopped
    networks:
      - saleor-backend-tier

volumes:
  saleor-db:
    driver: local
  saleor-redis:
    driver: local
  saleor-media:
  node_modules_store:

networks:
  saleor-backend-tier:
    driver: bridge
